// Load up the discord.js library
const Discord = require("discord.js");

// This is your client. Some people call it `bot`, some people call it `self`,
// some might call it `cootchie`. Either way, when you see `client.something`, or `bot.something`,
// this is what we're refering to. Your client.
const client = new Discord.Client();

// Here we load the config.json file that contains our token and our prefix values.
const config = require("./config.json");
// config.token contains the bot's token
// config.prefix contains the message prefix.

client.on("ready", () => {
  // This event will run if the bot starts, and logs in, successfully.
  console.log(`Bot has started, with ${client.users.size} users, in ${client.channels.size} channels of ${client.guilds.size} guilds.`);
  // Example of changing the bot's playing game to something useful. `client.user` is what the
  // docs refer to as the "ClientUser".
  client.user.setActivity(`Serving ${client.guilds.size} servers`);
});

client.on("guildCreate", guild => {
  // This event triggers when the bot joins a guild.
  console.log(`New guild joined: ${guild.name} (id: ${guild.id}). This guild has ${guild.memberCount} members!`);
  client.user.setActivity(`Serving ${client.guilds.size} servers`);
});

client.on("guildDelete", guild => {
  // this event triggers when the bot is removed from a guild.
  console.log(`I have been removed from: ${guild.name} (id: ${guild.id})`);
  client.user.setActivity(`Serving ${client.guilds.size} servers`);
});



client.on("message", async message => {
  // This event will run on every single message received, from any channel or DM.

  // It's good practice to ignore other bots. This also makes your bot ignore itself
  // and not get into a spam loop (we call that "botception").
  if(message.author.bot) return;

  // Also good practice to ignore any message that does not start with our prefix,
  // which is set in the configuration file.
  if(message.content.indexOf(config.prefix) !== 0) return;

  // Here we separate our "command" name, and our "arguments" for the command.
  // e.g. if we have the message "+say Is this the real life?" , we'll get the following:
  // command = say
  // args = ["Is", "this", "the", "real", "life?"]
  const args = message.content.slice(config.prefix.length).trim().split(/ +/g);
  const command = args.shift().toLowerCase();

  //GENERAL LIST OF COMMANDS
    //THIS NEEDS TO REMAIN UPDATED FOR THE HELP CALL
  var helpList = ["ping", "say", "kiss", "boop", "pat", "spank", "lick", "shoot", "hug", "slap", "cuddle", "shrugs", "snuggle"];
  var helpDescrip = ["Ping me for my response time", "Make me say something", "Kiss a Member", "Boop a member's snoot!", "Pat a member", "Spank a member", "Lick a member", "Shoot a member (OUCH!)", "Hug a member", "slap a member", "Cuddle a member", "shrugs for you", "Snuggle a member"];



  if(command === "help") {

     if(typeof(args[0]) === "undefined"){
       var sayMessage = "Please use the following commands:\n";
       for(i in helpList){
       sayMessage = sayMessage + helpList[i] + ": " + helpDescrip[i] + "\n";
       }
       return message.channel.send(sayMessage);
     };
      //Looks to see if there is a specific command after +help if its undefined it
        var x = helpList.indexOf(args[0].toString());
      //finds the command in the list of commands
      if(x === -1){
          return message.channel.send(`The command ${args[0].toString()} is not recognized`);             //if its not a valid command return command not recognized
        };
      return message.channel.send(`${helpList[x]}\n This command will ${helpDescrip[x]}`);
    }





//BASIC ACTIONS
function isSelfTest () {
    let member = message.mentions.members.first() || message.guild.members.get(args[0]);
    if(member.user === message.author )  return true;
    return false;
  };
  if(command === "ping") {
    // Calculates ping between sending a message and editing it, giving a nice round-trip latency.
    // The second ping is an average latency between the bot and the websocket server (one-way, not round-trip)
    const m = await message.channel.send("Ping?");
    m.edit(`AAHH! My latency is ${m.createdTimestamp - message.createdTimestamp}ms. API Latency is ${Math.round(client.ping)}ms`);
  }

  if(command === "say") {
    // makes the bot say something and delete the message. As an example, it's open to anyone to use.
    // To get the "message" itself we join the `args` back into a string with spaces:
    const sayMessage = args.join(" ");
    // Then we delete the command message (sneaky, right?). The catch just ignores the error with a cute smiley thing.
    message.delete().catch(O_o=>{});
    // And we get the bot to say the thing:
    message.channel.send(sayMessage);
  }
  if(command === "kiss") {
	  let member = message.mentions.members.first() || message.guild.members.get(args[0]);
    if(!member)
		return message.reply("That person doesn't appear to be in the server.");
    if(isSelfTest()) return message.channel.send(`${message.author} tried to **${command}** themself, how narcissistic!`);

	message.channel.send(`Smoochy Smoochy ${message.author} just **kissed** ${member.user}!`);
  }

  if(command === "boop") {
    let member = message.mentions.members.first() || message.guild.members.get(args[0]);
    if(!member)
      return message.reply("That person doesn't appear to be in the server.");
      if(isSelfTest()) return message.channel.send(`${message.author} just **${command}ed** themself, how odd O_o`);

  message.channel.send(`${member.user} just got **booped** by ${message.author}!`);
  }

  if(command === "pat") {
   let member = message.mentions.members.first() || message.guild.members.get(args[0]);
   if(!member)
   return message.reply("That person doesn't appear to be in the server.");
   if(isSelfTest()) return message.channel.send(`${message.author} **${command}ted** themself on the back!`);

  message.channel.send(`${member.user} just got some soft and gentle **pats** from ${message.author}!`);
  }

  if(command === "spank") {
   let member = message.mentions.members.first() || message.guild.members.get(args[0]);
   if(!member)
   return message.reply("That person doesn't appear to be in the server.");
   if(isSelfTest()) return message.channel.send(`${message.author} **${command}ed** themselves...Alrighty then!`);

  message.channel.send(`${message.author} **spanked** ${member.user}, ouch!`);
  }

  if(command === "lick") {
   let member = message.mentions.members.first() || message.guild.members.get(args[0]);
   if(!member)
   return message.reply("That person doesn't appear to be in the server.");
   if(isSelfTest()) return message.channel.send(`${message.author} tried to **${command}** themself! *between you and I, we should get them some help!*`);

  message.channel.send(`${message.author} just gave ${member.user} a nice slobbery **lick**!`);
  }

  if(command === "shoot") {
   let member = message.mentions.members.first() || message.guild.members.get(args[0]);
   if(!member)
   return message.reply("That person doesn't appear to be in the server.");
   if(isSelfTest()) return message.channel.send(`${message.author} just shot themself! I didn't think they would actually do it O_O'`);

  message.channel.send(`${message.author} **shot** ${member.user}, +100!`);
  }

  if(command === "hug") {
   let member = message.mentions.members.first() || message.guild.members.get(args[0]);
   if(!member)
   return message.reply("That person doesn't appear to be in the server.");
   if(isSelfTest()) return message.channel.send(`${message.author} gave themself a nice warm embrace ^w^`);

  message.channel.send(`D'aww, ${message.author} just gave ${member.user} a nice warm hug!`);
  }

  if(command === "slap") {
   let member = message.mentions.members.first() || message.guild.members.get(args[0]);
   if(!member)
   return message.reply("That person doesn't appear to be in the server.");
   if(isSelfTest()) return message.channel.send(`${message.author} **${command}s** themselves! They feel more awake now!`);

  message.channel.send(`Oooh that's gotta hurt! ${member.user} got smacked by ${message.author}! You're gonna feel that in the morning!`);
  }

  if(command === "cuddle") {
   let member = message.mentions.members.first() || message.guild.members.get(args[0]);
   if(!member)
   return message.reply("That person doesn't appear to be in the server.");
   if(isSelfTest())
    return message.channel.send(`${message.author} just cuddled with themself! How cute!`);

  message.channel.send(`${message.author} cuddles ${member.user} with a soft gentle embrace!`);
  }

  if(command === "shrugs") {
    message.channel.send(`${message.author} **shrugged** ¯\\_(ツ)_/¯ !`);
  }
  if(command === "snuggle") {
	  let member = message.mentions.members.first() || message.guild.members.get(args[0]);
   if(!member)
   return message.reply("That person doesn't appear to be in the server.");
   if(isSelfTest())
    return message.channel.send(`${message.author} **${command}s** with themselves!`);

  message.channel.send(`${message.author} snuggles ${member.user} intimately~`);
  }






//ADIMIN CONTROLS

  if(command === "kick") {
    // This command must be limited to mods and admins. In this example we just hardcode the role names.
    // Please read on Array.some() to understand this bit:
    // https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/some?
    if(!message.member.roles.some(r=>["Administrator", "Moderator"].includes(r.name)) )
      return message.reply("Sorry, you don't have permissions to use this!");

    // Let's first check if we have a member and if we can kick them!
    // message.mentions.members is a collection of people that have been mentioned, as GuildMembers.
    // We can also support getting the member by ID, which would be args[0]
    let member = message.mentions.members.first() || message.guild.members.get(args[0]);
    if(!member)
      return message.reply("Please mention a valid member of this server");
    if(!member.kickable)
      return message.reply("I cannot kick this user! Do they have a higher role? Do I have kick permissions?");

    // slice(1) removes the first part, which here should be the user mention or ID
    // join(' ') takes all the various parts to make it a single string.
    let reason = args.slice(1).join(' ');
    if(!reason) reason = "No reason provided";

    // Now, time for a swift kick in the nuts!
    await member.kick(reason)
      .catch(error => message.reply(`Sorry ${message.author} I couldn't kick because of : ${error}`));
    message.reply(`${member.user.tag} has been kicked by ${message.author.tag} because: ${reason}`);

  }

  if(command === "ban") {
    // Most of this command is identical to kick, except that here we'll only let admins do it.
    // In the real world mods could ban too, but this is just an example, right? ;)
    if(!message.member.roles.some(r=>["mods"].includes(r.name))  )
      return message.reply("Sorry, you don't have permissions to use this!");

    let member = message.mentions.members.first();
    if(!member)
      return message.reply("Please mention a valid member of this server");
    if(!member.bannable)
      return message.reply("I cannot ban this user! Do they have a higher role? Do I have ban permissions?");

    let reason = args.slice(1).join(' ');
    if(!reason) reason = "No reason provided";

    await member.ban(reason)
      .catch(error => message.reply(`Sorry ${message.author} I couldn't ban because of : ${error}`));
    message.reply(`${member.user.tag} has been banned by ${message.author.tag} because: ${reason}`);
  }

  if(command === "purge") {
    // This command removes all messages from all users in the channel, up to 100.

    // get the delete count, as an actual number.
    const deleteCount = parseInt(args[0], 10);

    // Ooooh nice, combined conditions. <3
    if(!deleteCount || deleteCount < 2 || deleteCount > 100)
      return message.reply("Please provide a number between 2 and 100 for the number of messages to delete");

    // So we get our messages, and delete them. Simple enough, right?
    const fetched = await message.channel.fetchMessages({limit: deleteCount});
    message.channel.bulkDelete(fetched)
      .catch(error => message.reply(`Couldn't delete messages because of: ${error}`));
  }
  //





});

client.login(config.token);
